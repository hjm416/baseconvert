#! /usr/bin/env python3

#This is a commandline tool to convert numbers between decimal, binary, octal, and hexadecimal
import sys, traceback
from sys import exit
import argparse
parser = argparse.ArgumentParser(description="Convert a number between base 10, base 2, base 8, and base 16")
parser.add_argument("number", help="the number you wish to convert to a different base system")
parser.add_argument("number_type", help="current base of the number you wish to convert, ie binary (b), decimal (d), octal (o), or hexadecimal(h)")
parser.add_argument("to_type", help="base you wish to convert number to, ie binary(b), decimal (d), octal (o), or hexadecimal (h)")
args = parser.parse_args()

def d_to_b(number):
  try:
    print('>> ' + bin(int(number))[2:])
  except ValueError:
    print('ValueError: input number is not base 10 integer')
    
def b_to_d(number):
  try:
    print('>> ' + str(int(str(number), 2)))
  except ValueError:
    print('ValueError: input number is not binary')
    
def d_to_h(number):
  try:
    print('>> ' + hex(int(number))[2:])
  except ValueError:
    print('ValueError: input number is not base 10 integer')
    
def b_to_h(number):
  try:
    print('>> ' + hex(int(str(number), 2))[2:])
  except ValueError:
    print('ValueErorr: input number is not binary')

def h_to_d(number):
  try:
    deci = int(str(number), 16)
    print('>> ' + str(deci))
  except ValueError:
    print('ValueError: input number is not valid hexadecimal')

def h_to_b(number):
  try:
    deci = int(str(number), 16)
    print('>> ' + bin(deci)[2:])
  except ValueError:
    print('ValueError: input number is not valid hexadecimal')

def d_to_o(number):
  try:
    print('>> ' + str(oct(int(number))[2:]))
  except ValueError:
    print('ValueError: input number not decimal integer')

def o_to_d(number):
  try:
    print('>> ' + str(int(number, 8)))
  except ValueError:
    print('ValueError: input number not valid  octal')

def b_to_o(number):
  try:
    deci = int(number, 2)
    print('>> ' + str(oct(deci)[2:]))
  except ValueError:
    print('ValueError: input number is not base 2')

def o_to_b(number):
  try:
    print('>> ' + str(bin(int(str(number), 8))[2:]))
  except ValueError:
    print('ValueError: input number not base 8')

def h_to_o(number):
  try:
    print('>> ' + str(oct(int(number, 16))[2:]))
  except ValueError:
    print('ValueError: input number not valid hexadecimal')

def o_to_h(number):
  try:
    print('>> ' + str(hex(int(number, 8))[2:]))
  except ValueError:
    print('ValueError: input number not valid octal')
    
def start():
  try:
    if args.number_type == 'd' and args.to_type == 'b':
      d_to_b(args.number)
    elif args.number_type == 'b' and args.to_type == 'd':
      b_to_d(args.number)
    elif args.number_type == 'd' and args.to_type == 'h':
      d_to_h(args.number)
    elif args.number_type == 'b' and args.to_type == 'h':
      b_to_h(args.number)
    elif args.number_type == 'h' and args.to_type == 'd':
      h_to_d(args.number)
    elif args.number_type == 'h' and args.to_type == 'b':
      h_to_b(args.number)
    elif args.number_type == 'd' and args.to_type == 'o':
      d_to_o(args.number)
    elif args.number_type == 'o' and args.to_type == 'd':
      o_to_d(args.number)
    elif args.number_type == 'b' and args.to_type == 'o':
      b_to_o(args.number)
    elif args.number_type == 'o' and args.to_type == 'b':
      o_to_b(args.number)
    elif args.number_type == 'h' and args.to_type == 'o':
      h_to_o(args.number)
    elif args.number_type == 'o' and args.to_type == 'h':
      o_to_h(args.number)
    else:
      print('Invalid arguments, see usage statement')
      sys.exit()
  
  except KeyboardInterrupt:
    print("exiting...") 

start()
